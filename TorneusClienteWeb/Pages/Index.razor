@page "/"
@inject ServicioMenu _servicioMenu
@layout LayoutVacio
@inject NavigationManager _nav
@inject ILocalStorageService _localStorage
@inject UsuarioServicio _usuarioServicio
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@inject ISnackbar _snackbar
@inject IJSRuntime _js




<div class="background-image">

    <div class="card-login">
        <div class="center-container-logo">
            <img src="/imagenes/logoTorneus.png" alt="" class="logo-login" />
        </div>
       

        <Boton BackGroungColor="#e0e0e0" ButtonText="Voy a iniciar con Google" ImageUrl="/imagenes/google.png" OnClick="AutentificarmeConGoogle"/>

        <EditForm Model="@UsuarioLogin" OnValidSubmit="Loguearme">
                    <DataAnnotationsValidator/>

            <MudTextField @bind-Value="UsuarioLogin.Mail"
                              Label="Usuario"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                          For="@(() => UsuarioLogin.Mail)" />

            <EspacioVertical Altura="7px" />

            <MudTextField @bind-Value="UsuarioLogin.Pass"
                              Label="Contraseña"
                              Variant="Variant.Outlined"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="ButtonTestclick"
                              AdornmentAriaLabel="Ver contraseña"
                              Margin="Margin.Dense"
                          For="@(() => UsuarioLogin.Pass)" />

                          <EspacioVertical Altura="12px" />
                    <div class="center-container-login">
                          <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Loguearme</MudButton>
                    </div>
        </EditForm>

        <div class="link-derecha">
            <a href="" @onclick="Registrar" @onclick:preventDefault>Registrate aqui!! </a>
        </div>

        <div class="link-medio">
            <a href="" class="link-login">Me olvidé de mi contraseña!!</a>
        </div>
        
       
    </div>

    @if (cargado)
    {
        <Cargando />
    }

</div>



@code{
    private string IdToken { get; set; }

    public LoginDTO UsuarioLogin { get; set; } = new(); 
    private bool cargado = false;

    bool isShow;
    InputType PasswordInput = InputType.Password;

    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected async override Task OnInitializedAsync()
    {
        IdToken = Util.ExtraerTokenURL(_nav.Uri);
        if (!string.IsNullOrEmpty(IdToken))
        {
            await _localStorage.SetItemAsync(Utilidades.Util.TOKEN_GOOGLE, IdToken);
            LoguearmeConGoogle();
            return;
        }

        UsuarioLogueado usuario = await _localStorage.GetItemAsync<UsuarioLogueado>(Util.TOKEN_LOCAL);
        if (usuario != null)
        {
            _usuarioServicio.ActualizarUsuarioLogueado(usuario);
            Navegar(usuario.Rol);
        }
    }


    public async void Loguearme()
    {
        try

        {
            cargado = true;
            bool respuesta = await _usuarioServicio.Loguearme(UsuarioLogin);
            var usuario = _usuarioServicio.ObtenerUsuarioLogueado();
            await _localStorage.SetItemAsync(Utilidades.Util.TOKEN_LOCAL, usuario);
            _snackbar.Add("Sesión iniciada", Severity.Success);
            Navegar(usuario.Rol);
        }
        catch (Exception ex)
        {
            cargado = false;
            _snackbar.Add(ex.Message, Severity.Warning);
            StateHasChanged();
        }
    }

    public async void LoguearmeConGoogle()
    {
        try

        {
            cargado = true;
            bool respuesta = await _usuarioServicio.LoguearmeConGoogle(IdToken);
            var usuario = _usuarioServicio.ObtenerUsuarioLogueado();
            await _localStorage.SetItemAsync(Utilidades.Util.TOKEN_LOCAL, usuario);
            _snackbar.Add("Sesión iniciada", Severity.Success);
            Navegar(usuario.Rol);
        }
        catch (Exception ex)
        {
            if (ex.Message == "REGISTRAR")
            {
                RegistrarConGoogle();
            }
            else
            {
                _snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void Navegar(string rol)
    {
        if (rol == Util.Roles.PLANILLERO.ToString() || rol == Util.Roles.ESPECTADOR.ToString())
        {
            _nav.NavigateTo($"/GENERAL/Principal");
        }
        else
        {
            _nav.NavigateTo($"/{rol}/Principal");
        }

    }

    private void Registrar()
    {
        _nav.NavigateTo("/Registro");
    }

    private void RegistrarConGoogle()
    {
        _nav.NavigateTo("/RegistroConGoogle");
    }

    private void AutentificarmeConGoogle()
    {
        var url ="https://accounts.google.com/o/oauth2/v2/auth?";
        url += "client_id=446867793846-0rp377qf18vd0ineseiftohhb7mi0852.apps.googleusercontent.com";
        url += "&redirect_uri=https://localhost:7101";
        url += "&response_type=id_token";
        url += "&scope=openid%20profile%20email&nonce=RANDOM_NONCE&state=RANDOM_STATE";

        _nav.NavigateTo(url);

    }


       
}

