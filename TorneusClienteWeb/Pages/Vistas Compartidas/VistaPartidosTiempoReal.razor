@page "/PartidosTiempoReal"
@inject ServicioMenu _servicioMenu
@inject TorneoServicio _servicioTorneo
@inject FixtureServicio _servicioFixture
@inject NotificacionesSignalRService _servicioNotificacionesSignalR
@inject HubConnection _hubConnection;
@inject UsuarioServicio _servicioUsuario
@inject AutPlanilleroServicio _servicioAutPlanillero
@inject IDialogService _dialogService
@inject ISnackbar _snackBar
@inject NavigationManager _nav


@if (Partidos == null)
{
    <Cargando />
}
else
{
    if (Partidos.Count > 0)
    {
        @foreach (var partido in Partidos)
        {
            <PartidoMarcador Partido="partido" UsuarioAutorizadoMarcador="UsuarioAutorizadoMarcadorPlanillero" />
        }

        <EspacioVertical Altura="90px" />
        <span class="posicionTiempoProm globo-propiedad">Tiempo prom. partidos: @_servicioFixture.TiempoPromedioMinutos min</span>

        @if (_servicioFixture.HayEtapaGrupos())
        {
            <MudFab Style="@_servicioMenu.ClassFabColor()" StartIcon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Large" OnClick="VerTablaPosiciones" />
        }
            <MudFab Style="@_servicioMenu.ClassFabColorResultados()" StartIcon="@Icons.Material.Filled.AlignVerticalBottom" Size="Size.Large" OnClick="VerResumenTorneo" />
   
    }
    else
    {
        <h3>No hay ningun partido para su seguimiento disponible aún</h3>
    }
}



@code {
    List<PartidoDTO> Partidos;

    private bool UsuarioAutorizadoMarcadorPlanillero = false;

    protected async override Task OnInitializedAsync()
    {
        if (!await _servicioUsuario.UsuarioEstaAutorizadoPágina("GENERAL")) _nav.NavigateTo("/",true);

        _servicioMenu.ActualizarNavegacionPOP(true, false, "/VisualizadorTorneo");
        _servicioMenu.ActualizarTitulo(_servicioTorneo.ObtenerTorneoActual().Nombre);
        await CargaInicial();
    }

    private async Task CargaInicial()
    {
        Partidos = _servicioFixture.ObtenerPartidos();
        await _servicioFixture.CrearTablaPosiciones();
        await _servicioFixture.ActualizarTiempoPromedioPartidos();
        _servicioFixture.OnActualizarPartidosEvent += Actualizar;

        await ActualizarUsuarioAutorizadoMarcador();

        _hubConnection.On<List<PartidoDTO>>("RecibirActualizarPartidos", async (partidos) =>
      {
          await _servicioNotificacionesSignalR.ActualizarPartidosSignalR(partidos);
          await EsFinalTorneo();
      });

        _hubConnection.On<int,int>("RecibirAccesoPlanillero", async (usuarioId,torneoId) =>
     {
         var usuarioLogueado = _servicioUsuario.ObtenerUsuarioLogueado();
         var torneo = _servicioTorneo.ObtenerTorneoActual();

         if (usuarioLogueado.Id == usuarioId && torneo.Id == torneoId)
         {
             await _servicioAutPlanillero.ObtenerAutorizaciones(usuarioLogueado);
             await ActualizarUsuarioAutorizadoMarcador();
         }
     });

    }

    private async Task ActualizarUsuarioAutorizadoMarcador()
    {
        int torneoActualId = _servicioTorneo.ObtenerTorneoActual().Id;
        int usuarioId = _servicioUsuario.ObtenerUsuarioLogueado().Id;
        UsuarioAutorizadoMarcadorPlanillero = await _servicioAutPlanillero.ExistenciaAutorizacionPlanillero(usuarioId, torneoActualId);
        StateHasChanged();
    }

    private void Actualizar()
    {
        Partidos = _servicioFixture.ObtenerPartidos();
        StateHasChanged();
    }


    private async Task VerTablaPosiciones()
    {
        var result = await _dialogService.Show<TablaPosicionesGrupo>("Tabla de posiciones.").Result;
    }

    private async Task VerResumenTorneo()
    {
        if (await EsFinalTorneo())
        {
            var result = await _dialogService.Show<ResumenTorneo>("Resumen torneo").Result;
        }
        else
        {
            _snackBar.Add("El resumen estará disponible una vez termine el torneo", Severity.Info);
        }

    }

    private async Task<bool> EsFinalTorneo()
    {
        bool EsFinaldePartido = await _servicioFixture.EsFinalTorneo();
        return EsFinaldePartido;
    }
                                                                                                                                                                                                                                    



}
